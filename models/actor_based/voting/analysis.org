#+title: Voting Model Analysis
#+author: Lawrence Qupty

Quadratic Voting Model Analysis

This document generates and presents analyses of the results from the inital Vision Quadratic Voting and Enforcer-Jury model.

#+NAME: model_run
#+begin_src python :results none
  import pandas as pd
  import json
  from radcad import Model, Simulation
  from model import initial_state, state_update_blocks

  model = Model(
      initial_state=initial_state, state_update_blocks=state_update_blocks, params={}
  )

  simulation = Simulation(model=model, timesteps=200, runs=1)
  result = simulation.run()

  # df = pd.DataFrame(result)
#+end_src

* Enforcer-Jury Model

Get data to be used for graphing.

#+NAME: enforcer_jury_data
#+BEGIN_SRC python :results none :noweb yes
  <<model_run>>

  import matplotlib.pyplot as plt

  guilty = []
  for step in result:
        if step["substep"] != 1:
              continue

        guilty_events = list(
              filter(lambda v: v.jury_verdict_guilty, step["voting_events"])
        )

        guilty_ratio = (
              len(guilty_events) / len(step["voting_events"])
              if len(step["voting_events"])
              else 0
        )

        # ratio of guilty verdicits when real result is
        # innocent over all guilty verdicts
        false_guilty_ratio = (
              len(list(filter(lambda v: v.real_result_guilty, guilty_events)))
              / len(guilty_events)
              if len(guilty_events)
              else 0
        )

        guilty.append((guilty_ratio * 100, false_guilty_ratio * 100))
#+end_src

Plot statistics on voting outcomes.

#+begin_src python :results none :noweb yes
  <<enforcer_jury_data>>

  guilty_ratio, false_guilty_ratio = zip(*guilty)
  plt.plot(guilty_ratio, label="% voting events guilty")
  plt.plot(false_guilty_ratio, label="% voting events falsely guilty")
  plt.ylim(0, 101)
  plt.xlabel("timestep")
  plt.ylabel("precentage")
  plt.legend()
  plt.show()
#+end_src
