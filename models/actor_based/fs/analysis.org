#+TITLE: File System Model Analysis
#+DATE: 08/07/2022
#+AUTHOR: Dowland Aiello

* File System Model Analysis

** TODO Items Left [1/2]
*** TODO Asset Pricing (VIS) [0/1]
**** TODO Transfers when users leave (exit = sell)
*** DONE Disputes [2/2]
CLOSED: [2022-08-15 Mon 01:58]
**** DONE Scenario 1: Unintentional
CLOSED: [2022-08-15 Mon 01:58]

Perhaps due to network or hard drive failure. Chance dictated by a distribution in system parameters. Assume reliability increases over time

**** DONE .Scenario 2: on purpose
CLOSED: [2022-08-15 Mon 01:58]

Due to empirical probability of j

Presented below are some analyses of the results of the initial run of the Vision file system simulation below:

#+NAME: model_run
#+BEGIN_SRC python
  import pandas as pd
  import json
  from radcad import Model, Simulation
  from model import treasury, initial_state, state_update_blocks

  params = {
      "grant_max": [5],
      "grant_portion": [20],
      "avg_contract_epochs": [[100, 20]],

      # The number of timesteps it takes to make a new user
      "new_user_interval": [30],

      # How often the user has a new idea that they need storing
      "new_idea_interval": [30],

      # How long (on average) it takes users to want to resubmit their order
      # at a higher price
      "order_resubmit_interval": [2],

      # How long it takes the user to leave after not getting an order filled
      "order_timeout_interval": [5],

      # How many timed-out (or unfilled in general) orders it takes for a user
      # to just leave. Expressed as a beta distribution (most will leave after
      # just 1)
      "user_timeout_dist": [[2, 15]],

      # How much above or below the market price the user tends to place their
      # asks at
      "user_stinginess_dist": [(0, 5)],

      # How often providers spawn
      "new_provider_interval": [60],

      # How long it takes for the provider to respond to changes in their
      # profitability: how many timesteps after having a sector unused, they
      # downsize, or go out of business entirely
      "provider_responsiveness": [[10, 5]],

      # How much space providers tend to start out with (in MiB)
      "provider_init_storage_dist": [[5, 5]],

      # Assume that the flucuating price of storage space (in $/MiB) decreases
      # over time (1/2 every 2 years), and that the price of storage space
      # decreases logarithmically with storage size
      "d_biyear_storage_price": [0.5],

      # The width of the discount or markup that different providers experience,
      # compared to the global price of storage
      "storage_price_discount_dist": [25],

      # The starting price of SSD storage in USD / MiB
      "base_storage_price": [0.000208666693],

      # The number of timesteps in a year's time
      "ticks_per_year": [512],

      # The % of a buyer's bid that a provider must put up to accept the bid
      "collateralization_rate": [1.0],

      # The initial chance users' equipment have of malfunctioning, causing
      # a slashing event
      "hardware_success_rate": [0.99],

      # The variance in quality of hardware among users of Vision (higher
      # quality = lower chance of failure)
      "hardware_quality_dist": [5],

      # The rate at which hardware gets more reliable over time in general
      # (5%/yr)
      "d_biyear_hardware_quality": [1.1],

      # The maximum number of challenges that may be issued during the course
      # of a contract's existence. Pretty much arbitrary
      "challenges_per_contract": [8],

      # What prices of gas on Ethereum can range from. Assume polygon-level gas
      # costs, and that gas is the same for all operations (ie, this is mean
      # gas limit * gas price)
      "gas_price_dist": [(0.1, 0.025)],

      # How many Vision users become aware of an order being eligible for
      # challenging
      "challenge_awareness_rate": [0.1],

      # The number of VIS that the minimum order price will be for priority
      "haggle_resolution": [0.000001],

      # The minimum percentage of their balance that a provider needs to
      # continue cheating
      "provider_required_cheat_payoff": [[0, 0.25]],

      # Distribution rates for slashing
      "slashing_dist_dao": [0.25],
      "slashing_dist_enf": [0.5],
  }

  model = Model(
      initial_state=initial_state, state_update_blocks=state_update_blocks, params=params
  )
  simulation = Simulation(model=model, timesteps=200, runs=1)
  result = simulation.run()

  df = pd.DataFrame(result)
#+END_SRC

#+RESULTS: model_run
: None

And display the results of the simulation as an org table:

#+BEGIN_SRC python :results value raw :noweb yes
<<model_run>>
from tabulate import tabulate

return tabulate(df.head(), headers=df.columns, tablefmt="orgtbl")
#+END_SRC

** Balance of the Treasury Over Time
Using the previous run of the model, we can visualize the change in the balance of the treasury over time, versus the number of users, and the total balance accumulated among them.

#+BEGIN_SRC python :results file :noweb yes :tangle yes
<<model_run>>
import matplotlib.pyplot as plt

df["treasury"] = df["providers"].apply(lambda x: x[0].balance)
df["providers_balance"] = df["providers"].apply(lambda providers: sum(prov.balance for prov in providers.values()))
df["users_balance"] = df["users"].apply(lambda users: sum(user.balance for user in users.values()))
df["n_users"] = df["users"].str.len()
df["n_providers"] = df["providers"].str.len()
df["n_unfilled_orders"] = df["orders"].str.len()
df["n_active_orders"] = df["active"].str.len()
df["n_challenges"] = df["challenges"].str.len()
df["total_capacity"] = df["providers"].apply(lambda providers: sum(prov.capacity for prov in providers.values()))
df["used_capacity"] = df["providers"].apply(lambda providers: sum(prov.used for prov in providers.values()))
df["total_supply"] = 100
df["circulating_supply"] = df.apply(lambda row: sum(prov.balance for prov in row["providers"].values()) + sum(user.balance for user in row["users"].values()), axis=1)
fname = "output/all.png"
fig, axs = plt.subplots(4)

#df[["treasury", "n_users", "mkt_sprice", "n_providers", "n_unfilled_orders", "n_active_orders"]].plot()
df[["total_capacity", "used_capacity", "storage_stolen"]].plot(ax=axs[0])
df[["n_active_orders", "n_unfilled_orders", "n_users", "n_providers", "n_challenges"]].plot(ax=axs[1])
df[["mkt_sprice", "mkt_fsprice"]].plot(ax=axs[2])
df[["treasury", "providers_balance", "users_balance", "total_supply", "circulating_supply"]].plot(ax=axs[3])
plt.savefig(fname)

return fname
#+END_SRC

#+RESULTS:
[[file:output/all.png]]
